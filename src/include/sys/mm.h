#ifndef __MEMORY_MANAGEMENT_H
#define __MEMORY_MANAGEMENT_H

#include <types.h>
#include <multiboot.h>

#define PHYSICAL_FRAMES_NUM         0x8000
#define PHYSICAL_FRAMES_BITMAP_SIZE (PHYSICAL_FRAMES_NUM / 8)

#define PHYSICAL_FRAME_USED 1
#define PHYSICAL_FRAME_FREE !PHYSICAL_FRAME_USED

#define PHYSICAL_FRAME_MARK_USED_SUCCESS 0
#define PHYSICAL_FRAME_MARK_USED_ERROR   !PHYSICAL_FRAME_MARK_USED_SUCCESS

#define PHYSICAL_FRAME_ALLOCATE_SUCCESS 0
#define PHYSICAL_FRAME_ALLOCATE_ERROR   !PHYSICAL_FRAME_ALLOCATE_SUCCESS

#define PHYSICAL_FRAME_DEALLOCATE_SUCCESS 0
#define PHYSICAL_FRAME_DEALLOCATE_ERROR   !PHYSICAL_FRAME_DEALLOCATE_SUCCESS

#define PHYSICAL_FRAME_MARK_FREE_SUCCESS 0
#define PHYSICAL_FRAME_MARK_FREE_ERROR   !PHYSICAL_FRAME_MARK_FREE_SUCCESS

#define PHYSICAL_MEM_FRAME_SIZE       0x1000
#define PHYSICAL_MEM_ADDR_FRAME_ALIGN ~(PHYSICAL_MEM_FRAME_SIZE - 1)




#define MM_PAGE_SIZE  0x1000
#define MM_FRAME_SIZE MM_PAGE_SIZE

#define MM_PAGE_OFFSET_BITS_NUM  0x0c
#define MM_FRAME_OFFSET_BITS_NUM MM_PAGE_OFFSET_BITS_NUM

#define MM_GET_PHYSICAL_MEM_FRAME_NUM(phys_addr) \
    (((u32_t)(phys_addr)) >> MM_FRAME_OFFSET_BITS_NUM)



/* functions' prototypes */
void detect_physical_memory(multiboot_info_t *);
u32_t allocate_physical_memory_frame(void);
u32_t deallocate_physical_memory_frame(u32_t);


#endif /* __MEMORY_MANAGEMENT_H */
